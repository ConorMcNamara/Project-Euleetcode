import unittest
import pytest
from Project_Euler.ProjectEuler import *


class TestProjectEuler(unittest.TestCase):

    # Problem 1

    def test_problem1_10(self):
        n = 10
        assert problem_1(n) == 23

    def test_problem1_1000(self):
        n = 1000
        assert problem_1(n) == 233168

    def test_problem1_list(self):
        n = 1000
        assert problem_1(n, 'list') == 233168

    # Problem 2

    def test_problem2_100(self):
        max_val = 100
        assert problem_2(max_val) == 44

    def test_problem2_4000000(self):
        max_val = 4000000
        assert problem_2(max_val) == 4613732

    def test_problem2_generator(self):
        max_val = 4000000
        assert problem_2(max_val, 'generator') == 4613732

    # Problem 3

    def test_problem3_13195(self):
        n = 13195
        assert problem_3(n) == 29

    def test_problem3_600851475143(self):
        n = 600851475143
        assert problem_3(n) == 6857

    # Problem 4
    def test_problem4_2(self):
        n = 2
        assert problem_4(n) == 9009

    def test_problem4_3(self):
        n = 3
        assert problem_4(3) == 906609

    # Problem 5

    def test_problem5_10(self):
        n = 10
        assert problem_5(10) == 2520

    def test_problem5_20(self):
        n = 20
        assert problem_5(n) == 232792560

    # Problem 6

    def test_problem6_10(self):
        n = 10
        assert problem_6(n) == 2640

    def test_problem6_100(self):
        n = 100
        assert problem_6(n) == 25164150

    def test_problem6_list(self):
        n = 100
        assert problem_6(n, 'list') == 25164150

    # Problem 7
    def test_problem7_6(self):
        n = 6
        assert problem_7(6) == 13

    def test_problem_7_10000(self):
        n = 10001
        assert problem_7(n) == 104743

    # Problem 8
    def test_problem8_4(self):
        n_digits = 4
        number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843" \
                 "8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557" \
                 "6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749" \
                 "3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776" \
                 "6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397" \
                 "5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474" \
                 "8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586" \
                 "1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408" \
                 "0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606" \
                 "0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
        assert problem_8(number, n_digits) == 5832

    def test_problem8_13(self):
        n_digits = 13
        number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843" \
                 "8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557" \
                 "6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749" \
                 "3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776" \
                 "6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397" \
                 "5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474" \
                 "8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586" \
                 "1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408" \
                 "0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606" \
                 "0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
        assert problem_8(number, n_digits) == 23514624000


if __name__ == '__main__':
    unittest.main()